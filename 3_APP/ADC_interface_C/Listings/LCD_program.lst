C51 COMPILER V9.60.7.0   LCD_PROGRAM                                                       04/08/2024 15:22:09 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD_PROGRAM
OBJECT MODULE PLACED IN .\Objects\LCD_program.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LCD\LCD_program.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\LCD_program.lst) TABS(2) OBJECT(.\Objects\LCD_program.obj)

line level    source

   1          
   2          
   3          
   4          
   5          
   6          
   7          #include <reg51.h>
   8          #include "LIB/STD_TYPES.h"
   9          #include "LIB/BIT_MATH.h"
  10          #include "LCD/LCD_private.h"
  11          #include "LCD/LCD_config.h"
  12          #include "LCD/LCD_interface.h"
  13          
  14          
  15          void lcd_cmd(u8 command)  //Function to send command instruction to LCD
  16          
  17          {
  18   1      
  19   1          display_port = command;
  20   1      
  21   1          RS= 0;
  22   1      
  23   1          RW=0;
  24   1      
  25   1          E=1;
  26   1      
  27   1          msdelay(1);
  28   1      
  29   1          E=0;
  30   1      
  31   1      }
  32          
  33          
  34          void lcd_data(u8 disp_data)  //Function to send display data to LCD
  35          
  36          {
  37   1      
  38   1          display_port = disp_data;
  39   1      
  40   1          RS= 1;
  41   1      
  42   1          RW=0;
  43   1      
  44   1          E=1;
  45   1      
  46   1          msdelay(1);
  47   1      
  48   1          E=0;
  49   1      
  50   1      }
  51          
  52          
  53           void lcd_init()    //Function to prepare the LCD  and get it ready
  54          {
C51 COMPILER V9.60.7.0   LCD_PROGRAM                                                       04/08/2024 15:22:09 PAGE 2   

  55   1      
  56   1          lcd_cmd(0x38);  // for using 2 lines and 5X7 matrix of LCD
  57   1      
  58   1          msdelay(10);
  59   1      
  60   1          lcd_cmd(0x0F);  // turn display ON, cuRSor blinking
  61   1      
  62   1          msdelay(10);
  63   1      
  64   1          lcd_cmd(0x01);  //clear screen
  65   1      
  66   1          msdelay(10);
  67   1      
  68   1          lcd_cmd(0x80);  // bring cuRSor to position 1 of line 1
  69   1      
  70   1          msdelay(10);
  71   1      
  72   1      
  73   1      }
  74          void LCD_String(const char * Copy_pcString)
  75          {
  76   1        u8 Local_u8Counter=0;
  77   1        while(Copy_pcString[Local_u8Counter]!='\0')
  78   1        {
  79   2          lcd_data(Copy_pcString[Local_u8Counter]);
  80   2          Local_u8Counter++;
  81   2        }
  82   1      }
  83          
  84          void LCD_WriteNumber(u16 Copy_u16Number)
  85          {
  86   1      
  87   1        u8 Max_Digits = Num_length(Copy_u16Number);
  88   1        s8 i;
  89   1        for (i = Max_Digits; i > 0; i--) {
  90   2          lcd_data((Copy_u16Number / Multi_N_10(i - 1)) + '0');
  91   2          Copy_u16Number = (Copy_u16Number % Multi_N_10(i - 1));
  92   2        }
  93   1      }
  94          static void msdelay(u16 time){
  95   1      
  96   1          u16 i,j ;
  97   1      
  98   1          for(i=0;i<time;i++)    
  99   1      
 100   1          for(j=0;j<1275;j++);
 101   1      
 102   1      }
 103          
 104          static u8 Num_length(u16 num)
 105          {
 106   1        u8 Local_u8Cnt = 0;
 107   1        if(num==0)
 108   1          return 1;
 109   1        while (num != 0) {
 110   2          num /= 10;
 111   2          Local_u8Cnt++;
 112   2        }
 113   1        return Local_u8Cnt;
 114   1      }
 115          static u16 Multi_N_10(u8 N) {
 116   1        u8 Local_u8Cnt;
C51 COMPILER V9.60.7.0   LCD_PROGRAM                                                       04/08/2024 15:22:09 PAGE 3   

 117   1        u16 p = 1;
 118   1        for (Local_u8Cnt = 0; Local_u8Cnt < N; Local_u8Cnt++)
 119   1          p *= 10;
 120   1        return p;
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    273    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
