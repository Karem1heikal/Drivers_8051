C51 COMPILER V9.60.7.0   MAIN                                                              01/19/2025 11:29:34 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          #include <stdio.h>
   3          #include <stdlib.h>
   4          #include "config.h"
   5          #include "UART.h"
   6          #include "program.h"
   7          
   8          // Global Variables
   9          unsigned int publicKey, privateKey, modulus;
  10          unsigned int i; // Iterator for loops
  11          
  12          // Main Function
  13          void main() {
  14   1          unsigned int plaintext, ciphertext, decrypted, p, q, phi;
  15   1          char buffer[MAX_BUFFER];
  16   1          char mode;
  17   1      
  18   1          UART_Init();
  19   1          UART_SendString("Enhanced RSA on 8052 Initialized\r\n");
  20   1      
  21   1          while (1) {
  22   2              UART_SendString("Choose mode: (e)ncrypt or (d)ecrypt: ");
  23   2              mode = UART_ReceiveChar();
  24   2              UART_SendChar(mode);
  25   2              UART_SendString("\r\n");
  26   2      
  27   2              if (mode == 'e') {
  28   3                  UART_SendString("Enter plaintext: ");
  29   3              } else if (mode == 'd') {
  30   3                  UART_SendString("Enter ciphertext: ");
  31   3              } else {
  32   3                  UART_SendString("Invalid mode.\r\n");
  33   3                  continue;
  34   3              }
  35   2      
  36   2              // Input plaintext or ciphertext
  37   2              for (i = 0; i < MAX_BUFFER; i++) buffer[i] = 0; // Clear buffer
  38   2              for (i = 0; i < MAX_BUFFER - 1; i++) {
  39   3                  buffer[i] = UART_ReceiveChar();
  40   3                  if (buffer[i] == '\r' || buffer[i] == '\n') break; // End on carriage return
  41   3                  UART_SendChar(buffer[i]); // Echo back
  42   3              }
  43   2                      UART_SendString("\r\n");
  44   2              plaintext = atoi(buffer);
  45   2      
  46   2              // Input primes p and q
  47   2              while (1) {
  48   3                  UART_SendString("Enter prime p: ");
  49   3                  for (i = 0; i < MAX_BUFFER; i++) buffer[i] = 0;
  50   3                  for (i = 0; i < MAX_BUFFER - 1; i++) {
  51   4                      buffer[i] = UART_ReceiveChar();
  52   4                      if (buffer[i] == '\r' || buffer[i] == '\n') break;
  53   4                      UART_SendChar(buffer[i]);
  54   4                  }
C51 COMPILER V9.60.7.0   MAIN                                                              01/19/2025 11:29:34 PAGE 2   

  55   3                  p = atoi(buffer);
  56   3      
  57   3                  if (isPrime(p)) {
  58   4                      UART_SendString(" -> p is prime.\r\n");
  59   4                      break;
  60   4                  } else {
  61   4                      UART_SendString(" -> p is not prime. Try again.\r\n");
  62   4                  }
  63   3              }
  64   2      
  65   2              while (1) {
  66   3                  UART_SendString("Enter prime q: ");
  67   3                  for (i = 0; i < MAX_BUFFER; i++) buffer[i] = 0;
  68   3                  for (i = 0; i < MAX_BUFFER - 1; i++) {
  69   4                      buffer[i] = UART_ReceiveChar();
  70   4                      if (buffer[i] == '\r' || buffer[i] == '\n') break;
  71   4                      UART_SendChar(buffer[i]);
  72   4                  }
  73   3                  q = atoi(buffer);
  74   3      
  75   3                  if (isPrime(q)) {
  76   4                      UART_SendString(" -> q is prime.\r\n");
  77   4                      break;
  78   4                  } else {
  79   4                      UART_SendString(" -> q is not prime. Try again.\r\n");
  80   4                  }
  81   3              }
  82   2      
  83   2              // Generate keys
  84   2              modulus = p * q;
  85   2                      sprintf(buffer, "modulus = %u\r\n", modulus);
  86   2                      UART_SendString(buffer);
  87   2                      phi = (p - 1) * (q - 1);
  88   2                      sprintf(buffer, "phi = %u\r\n", phi);
  89   2                      UART_SendString(buffer);
  90   2                      
  91   2              generateKeys(&publicKey, &privateKey, &phi);
  92   2                      
  93   2                      sprintf(buffer, "e = %u\r\n", publicKey);
  94   2                      UART_SendString(buffer);
  95   2                      sprintf(buffer, "d = %u\r\n", privateKey);
  96   2                      UART_SendString(buffer);
  97   2      
  98   2                      // Encrypt or decrypt
  99   2              if (mode == 'e') {
 100   3                  ciphertext = modExp(plaintext, publicKey, modulus);
 101   3                  sprintf(buffer, "Ciphertext: %u\r\n", ciphertext);
 102   3                  UART_SendString(buffer);
 103   3                              UART_SendString("\r\n");
 104   3              } else if (mode == 'd') {
 105   3                  decrypted = modExp(plaintext, privateKey, modulus);
 106   3                  sprintf(buffer, "Decrypted text: %u\r\n", decrypted);
 107   3                  UART_SendString(buffer);
 108   3                              UART_SendString("\r\n");
 109   3              }
 110   2          }
 111   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    783    ----
   CONSTANT SIZE    =    345    ----
C51 COMPILER V9.60.7.0   MAIN                                                              01/19/2025 11:29:34 PAGE 3   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      45
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
